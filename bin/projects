#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse
import sys

from changes.config import create_app, db
from changes.db.utils import create_or_update
from changes.models import Project, ProjectOption, Repository


def abort():
    print('Aborted!')
    sys.exit(1)


def get_input(name, default=None, required=True, choices=None):
    output = name + ' ? '
    if default:
        output += '[%s] ' % (default,)

    if choices:
        output += '(%s) ' % ('|'.join(choices),)

    value = raw_input(output)
    if not value:
        value = default
    if required and not value:
        abort()
    return value


def get_project(id_):
    if len(id_) == 40:
        # assume its a uuid
        project = Project.query.get(id_)
    else:
        project = Project.query.filter_by(slug=id_).first()

    if not project:
        print("Project not found")
        sys.exit(1)

    return project

app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage projects')

subparsers = parser.add_subparsers(dest='command')

parser_add = subparsers.add_parser('add', help='add project')
parser_add.add_argument('--label', dest='label', help='project label')
parser_add.add_argument('--repo-url', metavar='url', dest='repo_url', help='repository url')
parser_add.add_argument('--slug', metavar='slug', dest='slug', help='project slug')

parser_edit = subparsers.add_parser('edit', help='edit project')
parser_edit.add_argument('id', help='project ID or slug')
parser_edit.add_argument('--label', dest='label', help='project label')
parser_edit.add_argument('--repo-url', metavar='url', dest='repo_url', help='repository url')
parser_edit.add_argument('--slug', metavar='slug', dest='slug', help='project slug')

parser_list = subparsers.add_parser('list', help='list projects')

parser_options = subparsers.add_parser('options', help='manage project options')
options_subparsers = parser_options.add_subparsers(dest='option_command')

parser_options_set = options_subparsers.add_parser('set', help='set project option')
parser_options_set.add_argument('id', help='project ID or slug')
parser_options_set.add_argument('option', help='key=value')

parser_options_set = options_subparsers.add_parser('delete', help='delete project option')
parser_options_set.add_argument('id', help='project ID or slug')
parser_options_set.add_argument('option', help='key')

parser_options_get = options_subparsers.add_parser('get', help='get project option')
parser_options_get.add_argument('id', help='project ID or slug')
parser_options_get.add_argument('option', help='key', nargs='?')


args = parser.parse_args()

if args.command == 'add':
    name = args.label or get_input('Project label')
    default_slug = name.replace(' ', '-').lower()
    if args.label:
        slug = args.slug or default_slug
    else:
        slug = args.slug or get_input('Project slug', default_slug)

    repo_url = args.repo_url or get_input('Repository URL')
    try:
        repo = Repository.query.filter_by(url=repo_url)[0]
    except IndexError:
        repo = Repository(url=repo_url)

    try:
        repo = Repository.query.filter_by(url=repo_url)[0]
    except IndexError:
        repo = Repository(url=repo_url)

    project = Project(
        slug=slug,
        name=name,
        repository=repo,
    )
    db.session.add(project)

    print("Created new project with ID {%s}" % (
        project.id,
    ))

elif args.command == 'edit':
    project = get_project(args.id)

    if args.label:
        project.name = args.label
    if args.slug:
        project.slug = args.slug

    if args.repo_url:
        repo = Repository.query.filter(
            Repository.url == args.repo_url
        ).first()
        if repo is None:
            repo = Repository(url=args.repo_url)
            db.session.add(repo)
        project.repository = repo

    db.session.add(project)

    print("Saved project with ID {%s}" % (
        project.id,
    ))

elif args.command == 'list':
    for project in Project.query.order_by(Project.slug.asc()):
        print(project.slug)

elif args.command == 'options':
    if args.option_command == 'set':
        project = get_project(args.id)

        name, value = args.option.split('=', 1)

        create_or_update(ProjectOption, where={
            'project': project,
            'name': name,
        }, values={
            'value': value,
        })
        print("%s=%s" % (name, value))

    if args.option_command == 'delete':
        project = get_project(args.id)

        ProjectOption.query.filter(
            ProjectOption.project_id == project.id,
            ProjectOption.name == args.option,
        ).delete(synchronize_session=False)
        print("Ok!")

    if args.option_command == 'get':
        project = get_project(args.id)

        option_list = ProjectOption.query.filter(
            ProjectOption.project_id == project.id,
        ).order_by(ProjectOption.name.asc())

        if args.option:
            option_list = option_list.filter(
                ProjectOption.name == args.option,
            )

        for option in option_list:
            print("%s=%s" % (option.name, option.value))


db.session.commit()
