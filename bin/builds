#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse
import sys

from changes.config import create_app, db
from changes.constants import Status
from changes.jobs.sync_build import sync_build
from changes.models import (
    Project, Build
)

app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage builds')

subparsers = parser.add_subparsers(dest='command')

parser_add = subparsers.add_parser('add', help='add build')
parser_add.add_argument('--project', metavar='slug', dest='project_slug', help='project slug')
parser_add.add_argument('--label', dest='label', help='build label')
parser_add.add_argument('--message', dest='message', help='build message')
parser_add.add_argument('--sha', metavar='sha', dest='revision_sha', help='parent revision sha')

parser_sync = subparsers.add_parser('sync', help='sync build details')
parser_sync.add_argument('id', help='build ID', nargs='?')
parser_sync.add_argument('-a', '--all', dest='all', action='store_true', help='all pending builds', required=False)

args = parser.parse_args()


def abort():
    print('Aborted!')
    sys.exit(1)


def get_build(id_):
    build = Build.query.get(id_)

    if not build:
        print("Build not found")
        sys.exit(1)

    return build


if args.command == 'add':
    project_slug = args.project_slug or raw_input('Project slug? ') or abort()
    project = Project.query.filter_by(slug=project_slug)[0]

    label = args.label or raw_input('Build label? ') or abort()
    message = args.message or raw_input('Build message? ') or abort()
    revision_sha = args.revision_sha or raw_input('Parent revision SHA? ') or abort()

    build = Build(
        project=project,
        repository=project.repository,
        label=label,
        message=message,
        revision_sha=revision_sha,
        status=Status.queued,
    )

    # TODO: this should use a backend defined by the project
    from changes.backends.jenkins.builder import JenkinsBuilder
    backend = JenkinsBuilder(app=app, base_url=app.config['JENKINS_URL'])
    backend.create_job(build)

    sync_build.delay(
        build_id=build.id.hex,
        task_id=build.id.hex,
    )

    db.session.add(build)
    db.session.commit()

    print("Created new build with ID {%s}" % (
        build.id,
    ))


elif args.command == 'sync':
    if args.id:
        builds = [get_build(args.id)]
    elif args.all:
        builds = Build.query.filter(Build.status != Status.finished)
    else:
        abort()

    for build in builds:
        print("Forcing build sync - {}".format(build.id.hex))

        sync_build.delay(
            build_id=build.id.hex,
            task_id=build.id.hex,
        )
