#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse

from changes.config import create_app, db
from changes.db.utils import create_or_update
from changes.models import ItemOption


app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage options')

subparsers = parser.add_subparsers(dest='command')

parser_set = subparsers.add_parser('set', help='set option')
parser_set.add_argument('id', help='item ID')
parser_set.add_argument('option', help='key=value')

parser_delete = subparsers.add_parser('delete', help='delete option')
parser_delete.add_argument('id', help='item ID')
parser_delete.add_argument('option', help='key')

parser_get = subparsers.add_parser('get', help='get option')
parser_get.add_argument('id', help='item ID')
parser_get.add_argument('option', help='key', nargs='?')


args = parser.parse_args()

if args.command == 'set':
    name, value = args.option.split('=', 1)

    create_or_update(ItemOption, where={
        'item_id': args.id,
        'name': name,
    }, values={
        'value': value,
    })
    print("%s=%s" % (name, value))

if args.command == 'delete':
    ItemOption.query.filter(
        ItemOption.item_id == args.id,
        ItemOption.name == args.option,
    ).delete(synchronize_session=False)
    print("Ok!")

if args.command == 'get':
    option_list = ItemOption.query.filter(
        ItemOption.item_id == args.id,
    ).order_by(ItemOption.name.asc())

    if args.option:
        option_list = option_list.filter(
            ItemOption.name == args.option,
        )

    for option in option_list:
        print("%s=%s" % (option.name, option.value))


db.session.commit()
