#!/usr/bin/env python

from __future__ import absolute_import, print_function

import argparse
import sys

from changes.config import create_app, db
from changes.db.utils import create_or_update
from changes.jobs.sync_repo import sync_repo
from changes.models import Repository, RepositoryBackend, RepositoryOption


def abort():
    print('Aborted!')
    sys.exit(1)


def get_input(name, default=None, required=True, choices=None):
    output = name + ' ? '
    if default:
        output += '[%s] ' % (default,)

    if choices:
        output += '(%s) ' % ('|'.join(choices),)

    value = raw_input(output)
    if not value:
        value = default
    if required and not value:
        abort()
    return value


def get_repo(id_):
    if len(id_) == 40:
        # assume its a uuid
        repo = Repository.query.get(id_)
    else:
        repo = Repository.query.filter_by(url=id_).first()

    if not repo:
        print("Repository not found")
        sys.exit(1)

    return repo

app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage repositories')

subparsers = parser.add_subparsers(dest='command')

parser_add = subparsers.add_parser('add', help='add repository')
parser_add.add_argument('--url', metavar='url', dest='url', help='repository url')
parser_add.add_argument(
    '--backend', metavar='backend', dest='backend',
    help='repository backend', choices=('git', 'hg', 'unknown'), default='unknown')

parser_edit = subparsers.add_parser('edit', help='edit repository')
parser_edit.add_argument('id', help='repository ID or url')
parser_edit.add_argument('--url', dest='url', help='repository url')
parser_edit.add_argument(
    '--backend', metavar='backend', dest='backend',
    help='repository backend', choices=('git', 'hg', 'unknown'))

parser_show = subparsers.add_parser('show', help='show repository details')
parser_show.add_argument('id', help='repository ID or url')

parser_sync = subparsers.add_parser('sync', help='sync repository details')
parser_sync.add_argument('id', help='repository ID or url', nargs='?')
parser_sync.add_argument('-a', '--all', dest='all', action='store_true', help='all repositories', required=False)

parser_list = subparsers.add_parser('list', help='list repositories')

parser_options = subparsers.add_parser('options', help='manage repository options')
options_subparsers = parser_options.add_subparsers(dest='option_command')

parser_options_set = options_subparsers.add_parser('set', help='set repository option')
parser_options_set.add_argument('id', help='repository ID or url')
parser_options_set.add_argument('option', help='key=value')

parser_options_set = options_subparsers.add_parser('delete', help='delete repository option')
parser_options_set.add_argument('id', help='repository ID or url')
parser_options_set.add_argument('option', help='key')

parser_options_get = options_subparsers.add_parser('get', help='get repository option')
parser_options_get.add_argument('id', help='repository ID or url')
parser_options_get.add_argument('option', help='key', nargs='?')

args = parser.parse_args()

if args.command == 'add':
    url = args.url or get_input('Repository URL')
    repo = Repository(
        url=url,
        backend=RepositoryBackend[args.backend],
    )

    db.session.add(repo)

    print("Created new repository with ID {%s}" % (
        repo.id,
    ))

elif args.command == 'edit':
    repo = get_repo(args.id)

    if args.url:
        repo.url = args.url

    if args.backend:
        repo.backend = RepositoryBackend[args.backend]

    db.session.add(repo)

    print("Saved repo with ID {%s}" % (
        repo.id,
    ))

elif args.command == 'list':
    for repo in Repository.query.order_by(Repository.url.asc()):
        print(repo.url)

elif args.command == 'show':
    repo = get_repo(args.id)

    print("ID:      {}".format(repo.id.hex))
    print("URL:     {}".format(repo.url))
    print("Backend: {}".format(repo.backend))
    print("Options:")

    for option in RepositoryOption.query.filter_by(repository_id=repo.id):
        print("  {} = {}".format(option.name, option.value))

elif args.command == 'sync':
    if args.id:
        repos = [get_repo(args.id)]
    elif args.all:
        repos = Repository.query.all()
    else:
        abort()

    for repo in repos:
        if repo.backend == RepositoryBackend.unknown:
            print("No backend configured for {}!".format(repo.url))
        else:
            print("Forcing repository sync - {}".format(repo.url))
            sync_repo(repo_id=repo.id.hex, task_id=repo.id.hex, continuous=False)

elif args.command == 'options':
    if args.option_command == 'set':
        repo = get_repo(args.id)

        name, value = args.option.split('=', 1)

        create_or_update(RepositoryOption, where={
            'repository': repo,
            'name': name,
        }, values={
            'value': value,
        })
        print("%s=%s" % (name, value))

    if args.option_command == 'delete':
        repo = get_repo(args.id)

        RepositoryOption.query.filter(
            RepositoryOption.repository_id == repo.id,
            RepositoryOption.name == args.option,
        ).delete(synchronize_session=False)
        print("Ok!")

    if args.option_command == 'get':
        repo = get_repo(args.id)

        option_list = RepositoryOption.query.filter(
            RepositoryOption.repository_id == repo.id,
        ).order_by(RepositoryOption.name.asc())

        if args.option:
            option_list = option_list.filter(
                RepositoryOption.name == args.option,
            )

        for option in option_list:
            print("%s=%s" % (option.name, option.value))

db.session.commit()
